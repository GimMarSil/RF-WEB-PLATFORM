"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "pages/api/evaluation-matrices";
exports.ids = ["pages/api/evaluation-matrices"];
exports.modules = {

/***/ "next/dist/compiled/next-server/pages-api.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/pages-api.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/pages-api.runtime.dev.js");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "@azure/msal-browser":
/*!**************************************!*\
  !*** external "@azure/msal-browser" ***!
  \**************************************/
/***/ ((module) => {

module.exports = import("@azure/msal-browser");;

/***/ }),

/***/ "@azure/msal-node":
/*!***********************************!*\
  !*** external "@azure/msal-node" ***!
  \***********************************/
/***/ ((module) => {

module.exports = import("@azure/msal-node");;

/***/ }),

/***/ "zod":
/*!**********************!*\
  !*** external "zod" ***!
  \**********************/
/***/ ((module) => {

module.exports = import("zod");;

/***/ }),

/***/ "(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevaluation-matrices&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cevaluation-matrices%5Cindex.ts&middlewareConfigBase64=e30%3D!":
/*!**********************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevaluation-matrices&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cevaluation-matrices%5Cindex.ts&middlewareConfigBase64=e30%3D! ***!
  \**********************************************************************************************************************************************************************************************************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   config: () => (/* binding */ config),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   routeModule: () => (/* binding */ routeModule)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/pages-api/module.compiled */ \"(api)/./node_modules/next/dist/server/future/route-modules/pages-api/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(api)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/build/templates/helpers */ \"(api)/./node_modules/next/dist/build/templates/helpers.js\");\n/* harmony import */ var _src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src\\pages\\api\\evaluation-matrices\\index.ts */ \"(api)/./src/pages/api/evaluation-matrices/index.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__]);\n_src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n\n\n// Import the userland code.\n\n// Re-export the handler (should be the default export).\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"default\"));\n// Re-export config.\nconst config = (0,next_dist_build_templates_helpers__WEBPACK_IMPORTED_MODULE_2__.hoist)(_src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__, \"config\");\n// Create and export the route module that will be consumed.\nconst routeModule = new next_dist_server_future_route_modules_pages_api_module_compiled__WEBPACK_IMPORTED_MODULE_0__.PagesAPIRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.PAGES_API,\n        page: \"/api/evaluation-matrices\",\n        pathname: \"/api/evaluation-matrices\",\n        // The following aren't used in production.\n        bundlePath: \"\",\n        filename: \"\"\n    },\n    userland: _src_pages_api_evaluation_matrices_index_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n\n//# sourceMappingURL=pages-api.js.map\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LXJvdXRlLWxvYWRlci9pbmRleC5qcz9raW5kPVBBR0VTX0FQSSZwYWdlPSUyRmFwaSUyRmV2YWx1YXRpb24tbWF0cmljZXMmcHJlZmVycmVkUmVnaW9uPSZhYnNvbHV0ZVBhZ2VQYXRoPS4lMkZzcmMlNUNwYWdlcyU1Q2FwaSU1Q2V2YWx1YXRpb24tbWF0cmljZXMlNUNpbmRleC50cyZtaWRkbGV3YXJlQ29uZmlnQmFzZTY0PWUzMCUzRCEiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7QUFBc0c7QUFDdkM7QUFDTDtBQUMxRDtBQUM2RTtBQUM3RTtBQUNBLGlFQUFlLHdFQUFLLENBQUMsd0VBQVEsWUFBWSxFQUFDO0FBQzFDO0FBQ08sZUFBZSx3RUFBSyxDQUFDLHdFQUFRO0FBQ3BDO0FBQ08sd0JBQXdCLGdIQUFtQjtBQUNsRDtBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxZQUFZO0FBQ1osQ0FBQzs7QUFFRCxxQyIsInNvdXJjZXMiOlsid2VicGFjazovL2F6dXJlLWFkLWxvZ2luLWFwcC8/OTc0MiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQYWdlc0FQSVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvcGFnZXMtYXBpL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IGhvaXN0IH0gZnJvbSBcIm5leHQvZGlzdC9idWlsZC90ZW1wbGF0ZXMvaGVscGVyc1wiO1xuLy8gSW1wb3J0IHRoZSB1c2VybGFuZCBjb2RlLlxuaW1wb3J0ICogYXMgdXNlcmxhbmQgZnJvbSBcIi4vc3JjXFxcXHBhZ2VzXFxcXGFwaVxcXFxldmFsdWF0aW9uLW1hdHJpY2VzXFxcXGluZGV4LnRzXCI7XG4vLyBSZS1leHBvcnQgdGhlIGhhbmRsZXIgKHNob3VsZCBiZSB0aGUgZGVmYXVsdCBleHBvcnQpLlxuZXhwb3J0IGRlZmF1bHQgaG9pc3QodXNlcmxhbmQsIFwiZGVmYXVsdFwiKTtcbi8vIFJlLWV4cG9ydCBjb25maWcuXG5leHBvcnQgY29uc3QgY29uZmlnID0gaG9pc3QodXNlcmxhbmQsIFwiY29uZmlnXCIpO1xuLy8gQ3JlYXRlIGFuZCBleHBvcnQgdGhlIHJvdXRlIG1vZHVsZSB0aGF0IHdpbGwgYmUgY29uc3VtZWQuXG5leHBvcnQgY29uc3Qgcm91dGVNb2R1bGUgPSBuZXcgUGFnZXNBUElSb3V0ZU1vZHVsZSh7XG4gICAgZGVmaW5pdGlvbjoge1xuICAgICAgICBraW5kOiBSb3V0ZUtpbmQuUEFHRVNfQVBJLFxuICAgICAgICBwYWdlOiBcIi9hcGkvZXZhbHVhdGlvbi1tYXRyaWNlc1wiLFxuICAgICAgICBwYXRobmFtZTogXCIvYXBpL2V2YWx1YXRpb24tbWF0cmljZXNcIixcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBhcmVuJ3QgdXNlZCBpbiBwcm9kdWN0aW9uLlxuICAgICAgICBidW5kbGVQYXRoOiBcIlwiLFxuICAgICAgICBmaWxlbmFtZTogXCJcIlxuICAgIH0sXG4gICAgdXNlcmxhbmRcbn0pO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1wYWdlcy1hcGkuanMubWFwIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevaluation-matrices&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cevaluation-matrices%5Cindex.ts&middlewareConfigBase64=e30%3D!\n");

/***/ }),

/***/ "(api)/./src/lib/db/pool.ts":
/*!****************************!*\
  !*** ./src/lib/db/pool.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   executeQuery: () => (/* binding */ executeQuery),\n/* harmony export */   executeTransaction: () => (/* binding */ executeTransaction),\n/* harmony export */   pool: () => (/* binding */ pool)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);\n\nif (!process.env.DATABASE_URL) {\n    throw new Error(\"DATABASE_URL environment variable is not set\");\n}\n// Validate SSL configuration\nconst sslConfig =  false ? 0 : undefined;\n// Create a single pool instance to be reused across the application\nconst pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: sslConfig,\n    max: 20,\n    idleTimeoutMillis: 30000,\n    connectionTimeoutMillis: 2000\n});\n// Handle pool errors\npool.on(\"error\", (err)=>{\n    console.error(\"Unexpected error on idle client\", err);\n    process.exit(-1);\n});\n// Helper function to execute queries with proper error handling\nasync function executeQuery(query, params = [], client) {\n    const shouldRelease = !client;\n    const queryClient = client || await pool.connect();\n    try {\n        const result = await queryClient.query(query, params);\n        return result.rows;\n    } catch (error) {\n        console.error(\"Database query error:\", error);\n        throw error;\n    } finally{\n        if (shouldRelease) {\n            queryClient.release();\n        }\n    }\n}\n// Helper function to execute transactions\nasync function executeTransaction(callback) {\n    const client = await pool.connect();\n    try {\n        await client.query(\"BEGIN\");\n        const result = await callback(client);\n        await client.query(\"COMMIT\");\n        return result;\n    } catch (error) {\n        await client.query(\"ROLLBACK\");\n        throw error;\n    } finally{\n        client.release();\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwaSkvLi9zcmMvbGliL2RiL3Bvb2wudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBMEI7QUFFMUIsSUFBSSxDQUFDQyxRQUFRQyxHQUFHLENBQUNDLFlBQVksRUFBRTtJQUM3QixNQUFNLElBQUlDLE1BQU07QUFDbEI7QUFFQSw2QkFBNkI7QUFDN0IsTUFBTUMsWUFBWUosTUFBeUIsR0FDdkMsQ0FBNkIsR0FDN0JNO0FBRUosb0VBQW9FO0FBQzdELE1BQU1DLE9BQU8sSUFBSVIsb0NBQUlBLENBQUM7SUFDM0JTLGtCQUFrQlIsUUFBUUMsR0FBRyxDQUFDQyxZQUFZO0lBQzFDTyxLQUFLTDtJQUNMTSxLQUFLO0lBQ0xDLG1CQUFtQjtJQUNuQkMseUJBQXlCO0FBQzNCLEdBQUc7QUFFSCxxQkFBcUI7QUFDckJMLEtBQUtNLEVBQUUsQ0FBQyxTQUFTLENBQUNDO0lBQ2hCQyxRQUFRQyxLQUFLLENBQUMsbUNBQW1DRjtJQUNqRGQsUUFBUWlCLElBQUksQ0FBQyxDQUFDO0FBQ2hCO0FBRUEsZ0VBQWdFO0FBQ3pELGVBQWVDLGFBQ3BCQyxLQUFhLEVBQ2JDLFNBQWdCLEVBQUUsRUFDbEJDLE1BQVk7SUFFWixNQUFNQyxnQkFBZ0IsQ0FBQ0Q7SUFDdkIsTUFBTUUsY0FBY0YsVUFBVSxNQUFNZCxLQUFLaUIsT0FBTztJQUVoRCxJQUFJO1FBQ0YsTUFBTUMsU0FBUyxNQUFNRixZQUFZSixLQUFLLENBQUNBLE9BQU9DO1FBQzlDLE9BQU9LLE9BQU9DLElBQUk7SUFDcEIsRUFBRSxPQUFPVixPQUFPO1FBQ2RELFFBQVFDLEtBQUssQ0FBQyx5QkFBeUJBO1FBQ3ZDLE1BQU1BO0lBQ1IsU0FBVTtRQUNSLElBQUlNLGVBQWU7WUFDakJDLFlBQVlJLE9BQU87UUFDckI7SUFDRjtBQUNGO0FBRUEsMENBQTBDO0FBQ25DLGVBQWVDLG1CQUNwQkMsUUFBcUM7SUFFckMsTUFBTVIsU0FBUyxNQUFNZCxLQUFLaUIsT0FBTztJQUVqQyxJQUFJO1FBQ0YsTUFBTUgsT0FBT0YsS0FBSyxDQUFDO1FBQ25CLE1BQU1NLFNBQVMsTUFBTUksU0FBU1I7UUFDOUIsTUFBTUEsT0FBT0YsS0FBSyxDQUFDO1FBQ25CLE9BQU9NO0lBQ1QsRUFBRSxPQUFPVCxPQUFPO1FBQ2QsTUFBTUssT0FBT0YsS0FBSyxDQUFDO1FBQ25CLE1BQU1IO0lBQ1IsU0FBVTtRQUNSSyxPQUFPTSxPQUFPO0lBQ2hCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9henVyZS1hZC1sb2dpbi1hcHAvLi9zcmMvbGliL2RiL3Bvb2wudHM/YzMxZSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQb29sIH0gZnJvbSAncGcnO1xyXG5cclxuaWYgKCFwcm9jZXNzLmVudi5EQVRBQkFTRV9VUkwpIHtcclxuICB0aHJvdyBuZXcgRXJyb3IoJ0RBVEFCQVNFX1VSTCBlbnZpcm9ubWVudCB2YXJpYWJsZSBpcyBub3Qgc2V0Jyk7XHJcbn1cclxuXHJcbi8vIFZhbGlkYXRlIFNTTCBjb25maWd1cmF0aW9uXHJcbmNvbnN0IHNzbENvbmZpZyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicgXHJcbiAgPyB7IHJlamVjdFVuYXV0aG9yaXplZDogZmFsc2UgfSBcclxuICA6IHVuZGVmaW5lZDtcclxuXHJcbi8vIENyZWF0ZSBhIHNpbmdsZSBwb29sIGluc3RhbmNlIHRvIGJlIHJldXNlZCBhY3Jvc3MgdGhlIGFwcGxpY2F0aW9uXHJcbmV4cG9ydCBjb25zdCBwb29sID0gbmV3IFBvb2woe1xyXG4gIGNvbm5lY3Rpb25TdHJpbmc6IHByb2Nlc3MuZW52LkRBVEFCQVNFX1VSTCxcclxuICBzc2w6IHNzbENvbmZpZyxcclxuICBtYXg6IDIwLCAvLyBNYXhpbXVtIG51bWJlciBvZiBjbGllbnRzIGluIHRoZSBwb29sXHJcbiAgaWRsZVRpbWVvdXRNaWxsaXM6IDMwMDAwLCAvLyBIb3cgbG9uZyBhIGNsaWVudCBpcyBhbGxvd2VkIHRvIHJlbWFpbiBpZGxlIGJlZm9yZSBiZWluZyBjbG9zZWRcclxuICBjb25uZWN0aW9uVGltZW91dE1pbGxpczogMjAwMCwgLy8gSG93IGxvbmcgdG8gd2FpdCBmb3IgYSBjb25uZWN0aW9uXHJcbn0pO1xyXG5cclxuLy8gSGFuZGxlIHBvb2wgZXJyb3JzXHJcbnBvb2wub24oJ2Vycm9yJywgKGVycikgPT4ge1xyXG4gIGNvbnNvbGUuZXJyb3IoJ1VuZXhwZWN0ZWQgZXJyb3Igb24gaWRsZSBjbGllbnQnLCBlcnIpO1xyXG4gIHByb2Nlc3MuZXhpdCgtMSk7XHJcbn0pO1xyXG5cclxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGV4ZWN1dGUgcXVlcmllcyB3aXRoIHByb3BlciBlcnJvciBoYW5kbGluZ1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVF1ZXJ5PFQgPSBhbnk+KFxyXG4gIHF1ZXJ5OiBzdHJpbmcsXHJcbiAgcGFyYW1zOiBhbnlbXSA9IFtdLFxyXG4gIGNsaWVudD86IGFueVxyXG4pOiBQcm9taXNlPFRbXT4ge1xyXG4gIGNvbnN0IHNob3VsZFJlbGVhc2UgPSAhY2xpZW50O1xyXG4gIGNvbnN0IHF1ZXJ5Q2xpZW50ID0gY2xpZW50IHx8IGF3YWl0IHBvb2wuY29ubmVjdCgpO1xyXG4gIFxyXG4gIHRyeSB7XHJcbiAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBxdWVyeUNsaWVudC5xdWVyeShxdWVyeSwgcGFyYW1zKTtcclxuICAgIHJldHVybiByZXN1bHQucm93cztcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRGF0YWJhc2UgcXVlcnkgZXJyb3I6JywgZXJyb3IpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGlmIChzaG91bGRSZWxlYXNlKSB7XHJcbiAgICAgIHF1ZXJ5Q2xpZW50LnJlbGVhc2UoKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbi8vIEhlbHBlciBmdW5jdGlvbiB0byBleGVjdXRlIHRyYW5zYWN0aW9uc1xyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZVRyYW5zYWN0aW9uPFQgPSBhbnk+KFxyXG4gIGNhbGxiYWNrOiAoY2xpZW50OiBhbnkpID0+IFByb21pc2U8VD5cclxuKTogUHJvbWlzZTxUPiB7XHJcbiAgY29uc3QgY2xpZW50ID0gYXdhaXQgcG9vbC5jb25uZWN0KCk7XHJcbiAgXHJcbiAgdHJ5IHtcclxuICAgIGF3YWl0IGNsaWVudC5xdWVyeSgnQkVHSU4nKTtcclxuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGNhbGxiYWNrKGNsaWVudCk7XHJcbiAgICBhd2FpdCBjbGllbnQucXVlcnkoJ0NPTU1JVCcpO1xyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgYXdhaXQgY2xpZW50LnF1ZXJ5KCdST0xMQkFDSycpO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfSBmaW5hbGx5IHtcclxuICAgIGNsaWVudC5yZWxlYXNlKCk7XHJcbiAgfVxyXG59ICJdLCJuYW1lcyI6WyJQb29sIiwicHJvY2VzcyIsImVudiIsIkRBVEFCQVNFX1VSTCIsIkVycm9yIiwic3NsQ29uZmlnIiwicmVqZWN0VW5hdXRob3JpemVkIiwidW5kZWZpbmVkIiwicG9vbCIsImNvbm5lY3Rpb25TdHJpbmciLCJzc2wiLCJtYXgiLCJpZGxlVGltZW91dE1pbGxpcyIsImNvbm5lY3Rpb25UaW1lb3V0TWlsbGlzIiwib24iLCJlcnIiLCJjb25zb2xlIiwiZXJyb3IiLCJleGl0IiwiZXhlY3V0ZVF1ZXJ5IiwicXVlcnkiLCJwYXJhbXMiLCJjbGllbnQiLCJzaG91bGRSZWxlYXNlIiwicXVlcnlDbGllbnQiLCJjb25uZWN0IiwicmVzdWx0Iiwicm93cyIsInJlbGVhc2UiLCJleGVjdXRlVHJhbnNhY3Rpb24iLCJjYWxsYmFjayJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(api)/./src/lib/db/pool.ts\n");

/***/ }),

/***/ "(api)/./src/lib/evaluation/validation.ts":
/*!******************************************!*\
  !*** ./src/lib/evaluation/validation.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   calculateWeightedScore: () => (/* binding */ calculateWeightedScore),\n/* harmony export */   isDateInRange: () => (/* binding */ isDateInRange),\n/* harmony export */   isValidDateRange: () => (/* binding */ isValidDateRange),\n/* harmony export */   isValidScoreRange: () => (/* binding */ isValidScoreRange),\n/* harmony export */   validateEmployeeEvaluationInput: () => (/* binding */ validateEmployeeEvaluationInput),\n/* harmony export */   validateEvaluationPeriod: () => (/* binding */ validateEvaluationPeriod),\n/* harmony export */   validateEvaluationUpdate: () => (/* binding */ validateEvaluationUpdate),\n/* harmony export */   validateMatrixInput: () => (/* binding */ validateMatrixInput),\n/* harmony export */   validateScoreInputs: () => (/* binding */ validateScoreInputs),\n/* harmony export */   validateSelfEvaluationInput: () => (/* binding */ validateSelfEvaluationInput),\n/* harmony export */   validateSelfEvaluationUpdate: () => (/* binding */ validateSelfEvaluationUpdate),\n/* harmony export */   validateSelfScoreInputs: () => (/* binding */ validateSelfScoreInputs),\n/* harmony export */   validateStatusTransition: () => (/* binding */ validateStatusTransition),\n/* harmony export */   validateWeightsSum: () => (/* binding */ validateWeightsSum)\n/* harmony export */ });\n/* harmony import */ var zod__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zod */ \"zod\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([zod__WEBPACK_IMPORTED_MODULE_0__]);\nzod__WEBPACK_IMPORTED_MODULE_0__ = (__webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__)[0];\n\n// Base schemas for reuse\nconst dateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Date must be in YYYY-MM-DD format\");\nconst statusSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.enum([\n    \"draft\",\n    \"in_progress\",\n    \"submitted\",\n    \"validated\",\n    \"cancelled\",\n    \"acknowledged\"\n]);\n// Validation schemas\nconst evaluationCriterionSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    name: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Criterion name is required\"),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    weight: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0.01).max(100),\n    is_competency_gap_critical: zod__WEBPACK_IMPORTED_MODULE_0__.z.boolean().default(false),\n    min_score_possible: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(100).default(0),\n    max_score_possible: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(100).default(100)\n}).refine((data)=>data.min_score_possible <= data.max_score_possible, {\n    message: \"Minimum score must be less than or equal to maximum score\"\n});\nconst matrixInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    title: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().min(1, \"Title is required\"),\n    description: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    valid_from: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid date format (YYYY-MM-DD)\"),\n    valid_to: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/, \"Invalid date format (YYYY-MM-DD)\"),\n    criteria: zod__WEBPACK_IMPORTED_MODULE_0__.z.array(evaluationCriterionSchema).min(1, \"At least one criterion is required\")\n}).refine((data)=>new Date(data.valid_from) <= new Date(data.valid_to), {\n    message: \"Valid from date must be before or equal to valid to date\"\n});\nconst scoreInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    criterion_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    achievement_percentage: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(100),\n    manager_criterion_comments: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst selfScoreInputsSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    criterion_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    achievement_percentage: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(100),\n    employee_criterion_comments: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\nconst evaluationInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    matrix_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    employee_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.string(),\n    evaluation_period_month: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/),\n    status: statusSchema.optional(),\n    manager_overall_comments: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    employee_acknowledgement_comments: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional(),\n    cancellation_reason: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().optional()\n});\n// Self-evaluation schemas\nconst selfEvaluationInputSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    matrix_id: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().int().positive(),\n    evaluation_period_month: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().regex(/^\\d{4}-\\d{2}-\\d{2}$/)\n});\nconst selfEvaluationUpdateSchema = zod__WEBPACK_IMPORTED_MODULE_0__.z.object({\n    status: statusSchema.optional(),\n    employee_overall_comments: zod__WEBPACK_IMPORTED_MODULE_0__.z.string().max(2000).optional(),\n    total_weighted_score: zod__WEBPACK_IMPORTED_MODULE_0__.z.number().min(0).max(100).optional()\n}).refine((data)=>Object.keys(data).length > 0, {\n    message: \"At least one field must be provided for update\"\n});\n// Validation functions\nasync function validateMatrixInput(input) {\n    const errors = [];\n    // Validate title\n    if (!input.title || input.title.trim().length === 0) {\n        errors.push(\"Title is required\");\n    } else if (input.title.length > 255) {\n        errors.push(\"Title must be less than 255 characters\");\n    }\n    // Validate dates\n    if (!input.valid_from) {\n        errors.push(\"Valid from date is required\");\n    } else {\n        const validFrom = new Date(input.valid_from);\n        if (isNaN(validFrom.getTime())) {\n            errors.push(\"Valid from date is invalid\");\n        }\n    }\n    if (!input.valid_to) {\n        errors.push(\"Valid to date is required\");\n    } else {\n        const validTo = new Date(input.valid_to);\n        if (isNaN(validTo.getTime())) {\n            errors.push(\"Valid to date is invalid\");\n        }\n    }\n    if (input.valid_from && input.valid_to) {\n        const validFrom = new Date(input.valid_from);\n        const validTo = new Date(input.valid_to);\n        if (validFrom >= validTo) {\n            errors.push(\"Valid from date must be before valid to date\");\n        }\n    }\n    // Validate status\n    if (input.status && ![\n        \"draft\",\n        \"active\",\n        \"inactive\"\n    ].includes(input.status)) {\n        errors.push(\"Status must be one of: draft, active, inactive\");\n    }\n    // Validate criteria\n    if (!input.criteria || !Array.isArray(input.criteria) || input.criteria.length === 0) {\n        errors.push(\"At least one criterion is required\");\n    } else {\n        let totalWeight = 0;\n        input.criteria.forEach((criterion, index)=>{\n            // Validate criterion name\n            if (!criterion.name || criterion.name.trim().length === 0) {\n                errors.push(`Criterion ${index + 1}: Name is required`);\n            } else if (criterion.name.length > 255) {\n                errors.push(`Criterion ${index + 1}: Name must be less than 255 characters`);\n            }\n            // Validate criterion weight\n            if (typeof criterion.weight !== \"number\" || isNaN(criterion.weight)) {\n                errors.push(`Criterion ${index + 1}: Weight must be a number`);\n            } else if (criterion.weight <= 0) {\n                errors.push(`Criterion ${index + 1}: Weight must be greater than 0`);\n            } else {\n                totalWeight += criterion.weight;\n            }\n            // Validate score range\n            if (criterion.min_score_possible !== undefined) {\n                if (typeof criterion.min_score_possible !== \"number\" || isNaN(criterion.min_score_possible)) {\n                    errors.push(`Criterion ${index + 1}: Minimum score must be a number`);\n                } else if (criterion.min_score_possible < 0) {\n                    errors.push(`Criterion ${index + 1}: Minimum score must be greater than or equal to 0`);\n                }\n            }\n            if (criterion.max_score_possible !== undefined) {\n                if (typeof criterion.max_score_possible !== \"number\" || isNaN(criterion.max_score_possible)) {\n                    errors.push(`Criterion ${index + 1}: Maximum score must be a number`);\n                } else if (criterion.max_score_possible > 100) {\n                    errors.push(`Criterion ${index + 1}: Maximum score must be less than or equal to 100`);\n                }\n            }\n            if (criterion.min_score_possible !== undefined && criterion.max_score_possible !== undefined) {\n                if (criterion.min_score_possible >= criterion.max_score_possible) {\n                    errors.push(`Criterion ${index + 1}: Minimum score must be less than maximum score`);\n                }\n            }\n        });\n        // Validate total weight\n        if (Math.abs(totalWeight - 100) > 0.01) {\n            errors.push(\"Total weight of all criteria must equal 100\");\n        }\n    }\n    // Validate applicable employee IDs\n    if (input.applicable_employee_ids) {\n        if (!Array.isArray(input.applicable_employee_ids)) {\n            errors.push(\"Applicable employee IDs must be an array\");\n        } else if (input.applicable_employee_ids.length === 0) {\n            errors.push(\"At least one applicable employee must be specified\");\n        } else {\n            input.applicable_employee_ids.forEach((id, index)=>{\n                if (!id || typeof id !== \"string\") {\n                    errors.push(`Applicable employee ID at index ${index} is invalid`);\n                }\n            });\n        }\n    }\n    return {\n        success: errors.length === 0,\n        errors: errors.length > 0 ? errors : undefined\n    };\n}\nasync function validateScoreInputs(data) {\n    return zod__WEBPACK_IMPORTED_MODULE_0__.z.array(scoreInputSchema).parse(data);\n}\nasync function validateSelfScoreInputs(input) {\n    try {\n        const validatedData = await selfScoreInputsSchema.parseAsync(input);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            return {\n                success: false,\n                errors: error.errors.map((err)=>({\n                        path: err.path.join(\".\"),\n                        message: err.message\n                    }))\n            };\n        }\n        return {\n            success: false,\n            errors: [\n                {\n                    path: \"\",\n                    message: \"Invalid input format\"\n                }\n            ]\n        };\n    }\n}\nasync function validateEmployeeEvaluationInput(data) {\n    return evaluationInputSchema.parse(data);\n}\nasync function validateSelfEvaluationInput(input) {\n    try {\n        const validatedData = await selfEvaluationInputSchema.parseAsync(input);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            return {\n                success: false,\n                errors: error.errors.map((err)=>({\n                        path: err.path.join(\".\"),\n                        message: err.message\n                    }))\n            };\n        }\n        return {\n            success: false,\n            errors: [\n                {\n                    path: \"\",\n                    message: \"Invalid input format\"\n                }\n            ]\n        };\n    }\n}\n// Status transition validation\nfunction validateStatusTransition(currentStatus, newStatus, userRole, evaluationType) {\n    const validTransitions = {\n        // Self-evaluation transitions\n        self: {\n            employee: {\n                draft: [\n                    \"submitted\"\n                ],\n                submitted: []\n            },\n            admin: {\n                draft: [\n                    \"submitted\"\n                ],\n                submitted: [\n                    \"draft\"\n                ]\n            }\n        },\n        // Employee evaluation transitions\n        employee: {\n            employee: {\n                submitted: [\n                    \"acknowledged\"\n                ]\n            },\n            manager: {\n                draft: [\n                    \"in_progress\",\n                    \"submitted\"\n                ],\n                in_progress: [\n                    \"submitted\"\n                ],\n                submitted: [\n                    \"in_progress\"\n                ]\n            },\n            admin: {\n                draft: [\n                    \"in_progress\",\n                    \"submitted\"\n                ],\n                in_progress: [\n                    \"submitted\",\n                    \"draft\"\n                ],\n                submitted: [\n                    \"in_progress\",\n                    \"draft\",\n                    \"acknowledged\"\n                ],\n                acknowledged: [\n                    \"submitted\",\n                    \"in_progress\",\n                    \"draft\"\n                ]\n            }\n        }\n    };\n    const transitions = validTransitions[evaluationType]?.[userRole]?.[currentStatus] || [];\n    return transitions.includes(newStatus);\n}\n// Date validation helpers\nfunction isValidDateRange(from, to) {\n    const fromDate = new Date(from);\n    const toDate = new Date(to);\n    return fromDate <= toDate;\n}\nfunction isDateInRange(date, from, to) {\n    const checkDate = new Date(date);\n    const fromDate = new Date(from);\n    const toDate = new Date(to);\n    return checkDate >= fromDate && checkDate <= toDate;\n}\n// Score validation helpers\nfunction isValidScoreRange(score, min, max) {\n    return score >= min && score <= max;\n}\nfunction calculateWeightedScore(achievementPercentage, criterionWeight) {\n    const normalizedScore = achievementPercentage / 100;\n    return parseFloat((normalizedScore * criterionWeight).toFixed(2));\n}\n// Helper function to validate weights sum to 100\nfunction validateWeightsSum(weights) {\n    const sum = weights.reduce((acc, weight)=>acc + weight, 0);\n    return Math.abs(sum - 100) < 0.01; // Allow for small floating point differences\n}\n// Helper function to validate evaluation period\nfunction validateEvaluationPeriod(period) {\n    const date = new Date(period);\n    const today = new Date();\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(today.getFullYear() - 1);\n    return date >= oneYearAgo && date <= today;\n}\n// Validation for evaluation updates\nasync function validateEvaluationUpdate(input) {\n    try {\n        const validatedData = await evaluationInputSchema.parseAsync(input);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            return {\n                success: false,\n                errors: error.errors.map((err)=>({\n                        path: err.path.join(\".\"),\n                        message: err.message\n                    }))\n            };\n        }\n        return {\n            success: false,\n            errors: [\n                {\n                    path: \"\",\n                    message: \"Invalid input format\"\n                }\n            ]\n        };\n    }\n}\n// Self-evaluation update validation\nasync function validateSelfEvaluationUpdate(input) {\n    try {\n        const validatedData = await selfEvaluationUpdateSchema.parseAsync(input);\n        return {\n            success: true,\n            data: validatedData\n        };\n    } catch (error) {\n        if (error instanceof zod__WEBPACK_IMPORTED_MODULE_0__.z.ZodError) {\n            return {\n                success: false,\n                errors: error.errors.map((err)=>({\n                        path: err.path.join(\".\"),\n                        message: err.message\n                    }))\n            };\n        }\n        return {\n            success: false,\n            errors: [\n                {\n                    path: \"\",\n                    message: \"Invalid input format\"\n                }\n            ]\n        };\n    }\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/lib/evaluation/validation.ts\n");

/***/ }),

/***/ "(api)/./src/middleware/auth.ts":
/*!********************************!*\
  !*** ./src/middleware/auth.ts ***!
  \********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getUserDirectReports: () => (/* binding */ getUserDirectReports),\n/* harmony export */   getUserManager: () => (/* binding */ getUserManager),\n/* harmony export */   hasAnyRole: () => (/* binding */ hasAnyRole),\n/* harmony export */   hasRole: () => (/* binding */ hasRole),\n/* harmony export */   isAdmin: () => (/* binding */ isAdmin),\n/* harmony export */   isManager: () => (/* binding */ isManager),\n/* harmony export */   isSelfAccess: () => (/* binding */ isSelfAccess),\n/* harmony export */   withAuth: () => (/* binding */ withAuth)\n/* harmony export */ });\n/* harmony import */ var _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @azure/msal-browser */ \"@azure/msal-browser\");\n/* harmony import */ var _azure_msal_node__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @azure/msal-node */ \"@azure/msal-node\");\n/* harmony import */ var _lib_db_pool__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../lib/db/pool */ \"(api)/./src/lib/db/pool.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__, _azure_msal_node__WEBPACK_IMPORTED_MODULE_1__]);\n([_azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__, _azure_msal_node__WEBPACK_IMPORTED_MODULE_1__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\n\n// MSAL configuration\nconst msalConfig = {\n    auth: {\n        clientId: process.env.AZURE_AD_CLIENT_ID,\n        authority: `https://login.microsoftonline.com/${process.env.AZURE_AD_TENANT_ID}`,\n        redirectUri: process.env.AZURE_AD_REDIRECT_URI,\n        clientSecret: process.env.AZURE_AD_CLIENT_SECRET\n    },\n    cache: {\n        cacheLocation: \"localStorage\",\n        storeAuthStateInCookie: false\n    }\n};\n// MSAL Node configuration for client credentials\nconst msalNodeConfig = {\n    auth: {\n        clientId: process.env.AZURE_AD_CLIENT_ID,\n        authority: `https://login.microsoftonline.com/${process.env.AZURE_AD_TENANT_ID}`,\n        clientSecret: process.env.AZURE_AD_CLIENT_SECRET\n    }\n};\n// Validate MSAL configuration\nfunction validateMsalConfig() {\n    const requiredVars = {\n        AZURE_AD_CLIENT_ID: process.env.AZURE_AD_CLIENT_ID,\n        AZURE_AD_TENANT_ID: process.env.AZURE_AD_TENANT_ID,\n        AZURE_AD_REDIRECT_URI: process.env.AZURE_AD_REDIRECT_URI,\n        AZURE_AD_CLIENT_SECRET: process.env.AZURE_AD_CLIENT_SECRET\n    };\n    const missingVars = Object.entries(requiredVars).filter(([_, value])=>!value).map(([key])=>key);\n    if (missingVars.length > 0) {\n        console.error(\"Missing required Azure AD configuration:\", {\n            missing: missingVars,\n            config: {\n                ...requiredVars,\n                AZURE_AD_CLIENT_SECRET: requiredVars.AZURE_AD_CLIENT_SECRET ? \"[REDACTED]\" : undefined\n            }\n        });\n        throw new Error(`Missing required Azure AD configuration: ${missingVars.join(\", \")}`);\n    }\n}\n// Initialize MSAL instances\nlet msalInstance;\nlet confidentialClient;\ntry {\n    validateMsalConfig();\n    msalInstance = new _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__.PublicClientApplication(msalConfig);\n    confidentialClient = new _azure_msal_node__WEBPACK_IMPORTED_MODULE_1__.ConfidentialClientApplication(msalNodeConfig);\n    console.log(\"MSAL instances initialized successfully\");\n} catch (error) {\n    console.error(\"Failed to initialize MSAL:\", error);\n    throw error;\n}\n// Cache for Graph API token\nlet graphTokenCache = null;\n// Helper to get Graph API token using client credentials\nasync function getGraphApiToken() {\n    // Check if we have a valid cached token\n    if (graphTokenCache && graphTokenCache.expiresAt > Date.now() + 60000) {\n        return graphTokenCache.token;\n    }\n    try {\n        const result = await confidentialClient.acquireTokenByClientCredential({\n            scopes: [\n                process.env.AZURE_AD_GRAPH_SCOPE || \"https://graph.microsoft.com/.default\"\n            ]\n        });\n        if (!result?.accessToken) {\n            throw new Error(\"Failed to acquire Graph API token\");\n        }\n        // Cache the token\n        graphTokenCache = {\n            token: result.accessToken,\n            expiresAt: Date.now() + (result.expiresIn || 3600) * 1000\n        };\n        return result.accessToken;\n    } catch (error) {\n        console.error(\"Error acquiring Graph API token:\", error);\n        throw error;\n    }\n}\n// Helper to validate user token\nasync function validateUserToken(token) {\n    console.log(\"\\uD83D\\uDD10 Validating token against Microsoft Graph...\");\n    try {\n        // Get Graph API token using client credentials\n        const graphToken = await getGraphApiToken();\n        // Decode the user token to get the user ID\n        const decodedToken = JSON.parse(Buffer.from(token.split(\".\")[1], \"base64\").toString());\n        const userId = decodedToken.oid || decodedToken.sub;\n        if (!userId) {\n            console.error(\"Could not extract user ID from token\");\n            return null;\n        }\n        // Use the Graph API token to get user info\n        const response = await fetch(`https://graph.microsoft.com/v1.0/users/${userId}`, {\n            headers: {\n                Authorization: `Bearer ${graphToken}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            const body = await response.text();\n            console.error(\"❌ Microsoft Graph API error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: body\n            });\n            return null;\n        }\n        const user = await response.json();\n        console.log(\"✅ Microsoft Graph user info:\", user);\n        if (!user || !user.userPrincipalName) {\n            console.error(\"Could not extract userPrincipalName from Graph API response for user ID:\", userId);\n            return null;\n        }\n        // Get user roles from Microsoft Graph groups\n        const groupsResponse = await fetch(`https://graph.microsoft.com/v1.0/users/${userId}/memberOf`, {\n            headers: {\n                Authorization: `Bearer ${graphToken}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!groupsResponse.ok) {\n            console.warn(\"Could not fetch user groups from Microsoft Graph\");\n            return {\n                id: user.userPrincipalName,\n                roles: []\n            };\n        }\n        const groups = await groupsResponse.json();\n        const roles = groups.value.filter((group)=>group[\"@odata.type\"] === \"#microsoft.graph.group\").map((group)=>group.displayName.toLowerCase());\n        console.log(\"User roles from Microsoft Graph:\", roles);\n        return {\n            id: user.userPrincipalName,\n            roles: roles\n        };\n    } catch (error) {\n        console.error(\"Token validation error:\", {\n            error: error instanceof Error ? error.message : \"Unknown error\",\n            stack: error instanceof Error ? error.stack : undefined\n        });\n        return null;\n    }\n}\n// Helper to get user's manager from Microsoft Graph\nasync function getUserManager(token) {\n    try {\n        const graphToken = await getGraphApiToken();\n        // Decode the user token to get the user ID\n        const decodedToken = JSON.parse(Buffer.from(token.split(\".\")[1], \"base64\").toString());\n        const userId = decodedToken.oid || decodedToken.sub;\n        if (!userId) {\n            console.error(\"Could not extract user ID from token\");\n            return null;\n        }\n        const response = await fetch(`https://graph.microsoft.com/v1.0/users/${userId}/manager`, {\n            headers: {\n                Authorization: `Bearer ${graphToken}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            const body = await response.text();\n            console.error(\"❌ Error fetching manager:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: body\n            });\n            return null;\n        }\n        return await response.json();\n    } catch (error) {\n        console.error(\"Error fetching manager:\", error);\n        return null;\n    }\n}\n// Helper to get user's direct reports from Microsoft Graph\n// Accepts an optional userIdOrUpn to fetch reports for a specific user, \n// otherwise defaults to the user in the provided token (effectively \"/me\").\nasync function getUserDirectReports(token, userIdOrUpn) {\n    try {\n        const graphToken = await getGraphApiToken(); // This uses client credentials, not the user's token\n        let targetUserId = userIdOrUpn; // Use provided userIdOrUpn if available\n        if (!targetUserId) {\n            // If userIdOrUpn is not provided, get the user ID from the *user's* token for /me equivalent\n            const decodedUserToken = JSON.parse(Buffer.from(token.split(\".\")[1], \"base64\").toString());\n            targetUserId = decodedUserToken.oid || decodedUserToken.sub;\n            if (!targetUserId) {\n                console.error(\"[getUserDirectReports] Could not extract user ID from provided token when userIdOrUpn is not specified.\");\n                return [];\n            }\n            console.log(`[getUserDirectReports] Fetching reports for user from token (me): ${targetUserId}`);\n        } else {\n            console.log(`[getUserDirectReports] Fetching reports for specified user: ${targetUserId}`);\n        }\n        const endpoint = `https://graph.microsoft.com/v1.0/users/${targetUserId}/directReports?$select=id,displayName,userPrincipalName`;\n        const response = await fetch(endpoint, {\n            headers: {\n                Authorization: `Bearer ${graphToken}`,\n                \"Content-Type\": \"application/json\"\n            }\n        });\n        if (!response.ok) {\n            const body = await response.text();\n            console.error(\"❌ Error fetching direct reports:\", {\n                status: response.status,\n                statusText: response.statusText,\n                error: body\n            });\n            return [];\n        }\n        const data = await response.json();\n        return data.value || [];\n    } catch (error) {\n        console.error(\"Error fetching direct reports:\", error);\n        return [];\n    }\n}\n// Helper function to check if user has required role\nfunction hasRole(roles, requiredRole) {\n    return roles.includes(requiredRole);\n}\n// Helper function to check if user has any of the required roles\nfunction hasAnyRole(roles, requiredRoles) {\n    return requiredRoles.some((role)=>roles.includes(role));\n}\n// Helper function to check if user is accessing their own data\nfunction isSelfAccess(userId, targetId) {\n    return userId === targetId;\n}\n// Helper function to check if user is a manager\nfunction isManager(roles) {\n    return hasRole(roles, \"manager\");\n}\n// Helper function to check if user is an admin\nfunction isAdmin(roles) {\n    return hasRole(roles, \"admin\");\n}\n// Authentication middleware\nfunction withAuth(handler) {\n    return async (req, res)=>{\n        try {\n            // Get the authorization header\n            const authHeader = req.headers.authorization;\n            if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Authentication required\",\n                    code: \"AUTH_REQUIRED\"\n                });\n            }\n            // Extract and validate token\n            const token = authHeader.split(\" \")[1];\n            const userData = await validateUserToken(token);\n            if (!userData) {\n                return res.status(401).json({\n                    error: \"Unauthorized\",\n                    message: \"Invalid or expired token\",\n                    code: \"INVALID_TOKEN\"\n                });\n            }\n            // Get selected employee ID from header\n            const selectedEmployeeId = req.headers[\"x-selected-employee-id\"];\n            if (!selectedEmployeeId) {\n                return res.status(403).json({\n                    error: \"Forbidden\",\n                    message: \"Selected employee ID is required\",\n                    code: \"EMPLOYEE_REQUIRED\"\n                });\n            }\n            // DEBUGGING: Log types and values before the query\n            console.log(\"[AuthMiddleware] Employee Validation - Type of selectedEmployeeId:\", typeof selectedEmployeeId, \"Value:\", selectedEmployeeId);\n            console.log(\"[AuthMiddleware] Employee Validation - Type of userData.id:\", typeof userData.id, \"Value:\", userData.id);\n            // Verify selected employee belongs to user\n            const employeeCheck = await (0,_lib_db_pool__WEBPACK_IMPORTED_MODULE_2__.executeQuery)(\"SELECT 1 FROM employees WHERE employee_number = $1 AND user_id = $2\", [\n                selectedEmployeeId,\n                userData.id\n            ]);\n            if (employeeCheck.length === 0) {\n                console.error(\"[AuthMiddleware] Employee validation FAILED. No match found for:\", {\n                    selectedEmployeeId,\n                    userId: userData.id,\n                    queryResult: employeeCheck\n                });\n                return res.status(403).json({\n                    error: \"Forbidden\",\n                    message: \"Selected employee does not belong to user\",\n                    code: \"INVALID_EMPLOYEE\"\n                });\n            } else {\n                console.log(\"[AuthMiddleware] Employee validation SUCCESSFUL.\");\n            }\n            // Attach user data to request\n            req.user = {\n                ...userData,\n                account: await msalInstance.getActiveAccount()\n            };\n            // Call the handler\n            await handler(req, res);\n        } catch (error) {\n            console.error(\"Authentication error in withAuth:\", error);\n            if (error instanceof _azure_msal_browser__WEBPACK_IMPORTED_MODULE_0__.InteractionRequiredAuthError) {\n                return res.status(401).json({\n                    error: \"Authentication Required\",\n                    message: \"User interaction required\",\n                    code: \"INTERACTION_REQUIRED\"\n                });\n            }\n            return res.status(500).json({\n                error: \"Internal Server Error\",\n                message: \"Authentication failed\",\n                code: \"AUTH_ERROR\"\n            });\n        }\n    };\n}\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/middleware/auth.ts\n");

/***/ }),

/***/ "(api)/./src/pages/api/evaluation-matrices/index.ts":
/*!****************************************************!*\
  !*** ./src/pages/api/evaluation-matrices/index.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.a(module, async (__webpack_handle_async_dependencies__, __webpack_async_result__) => { try {\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! pg */ \"pg\");\n/* harmony import */ var pg__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(pg__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _middleware_auth__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../middleware/auth */ \"(api)/./src/middleware/auth.ts\");\n/* harmony import */ var _lib_evaluation_validation__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../../lib/evaluation/validation */ \"(api)/./src/lib/evaluation/validation.ts\");\nvar __webpack_async_dependencies__ = __webpack_handle_async_dependencies__([_middleware_auth__WEBPACK_IMPORTED_MODULE_1__, _lib_evaluation_validation__WEBPACK_IMPORTED_MODULE_2__]);\n([_middleware_auth__WEBPACK_IMPORTED_MODULE_1__, _lib_evaluation_validation__WEBPACK_IMPORTED_MODULE_2__] = __webpack_async_dependencies__.then ? (await __webpack_async_dependencies__)() : __webpack_async_dependencies__);\n\n\n\nconst pool = new pg__WEBPACK_IMPORTED_MODULE_0__.Pool({\n    connectionString: process.env.DATABASE_URL,\n    ssl: {\n        rejectUnauthorized: false\n    }\n});\n// Helper to set user ID for logging (if available)\nasync function setUserForSession(client, userId) {\n    if (userId) {\n        await client.query(`SET app.current_user_id = '${userId}';`);\n    } else {\n        // Clear it if no user is provided to avoid using stale ID from pooled connection\n        await client.query(\"SET app.current_user_id = '';\");\n    }\n}\n// Exemplo de body esperado para o frontend:\n// {\n//   \"title\": \"Matriz 2024\",\n//   \"description\": \"Avaliação anual\",\n//   \"valid_from\": \"2024-01-01\",\n//   \"valid_to\": \"2024-12-31\",\n//   \"criteria\": [\n//     { \"name\": \"Critério 1\", \"description\": \"...\", \"weight\": 50, \"is_cutting\": false },\n//     { \"name\": \"Critério 2\", \"description\": \"...\", \"weight\": 50, \"is_cutting\": false }\n//   ],\n//   \"employee_ids\": [\"123\", \"456\", \"789\"]\n// }\nasync function getAuthenticatedSystemUserId(req) {\n    // TODO: Replace with actual MSAL or equivalent authentication logic\n    console.warn(\"Using placeholder system user ID for audit logs in evaluation matrices API. Integrate actual authentication.\");\n    return \"system-placeholder-user-id\";\n}\nasync function getSelectedEmployeeId(req) {\n    const selectedEmployeeId = req.headers[\"x-selected-employee-id\"];\n    if (!selectedEmployeeId) {\n        console.warn(\"X-Selected-Employee-ID header not found for evaluation matrices API.\");\n        return null;\n    }\n    return selectedEmployeeId;\n}\nasync function handler(req, res) {\n    const { method } = req;\n    const client = await pool.connect();\n    try {\n        if (!req.user || !req.user.id) {\n            res.status(401).json({\n                message: \"Authentication required, user ID missing.\"\n            });\n            return;\n        }\n        const actingManagerUhpn = req.user.id; // UPN of the logged-in user creating the matrix\n        if (method === \"GET\") {\n            const sqlQueryBase = `\r\n        SELECT\r\n          em.id as matrix_id,\r\n          em.title,\r\n          em.description,\r\n          em.valid_from,\r\n          em.valid_to,\r\n          em.status,\r\n          em.created_at,\r\n          em.updated_at,\r\n          em.created_by_manager_id, -- This is manager's employee_number\r\n          creator.name as employee_name,\r\n          creator.company_name as company_name,\r\n          creator.employee_number as manager_profile_employee_number, -- manager's own employee_number from employees table\r\n          json_agg(\r\n            json_build_object(\r\n              'id', ec.id,\r\n              'name', ec.name,\r\n              'description', ec.description,\r\n              'weight', ec.weight,\r\n              'is_competency_gap_critical', ec.is_competency_gap_critical,\r\n              'min_score_possible', ec.min_score_possible,\r\n              'max_score_possible', ec.max_score_possible\r\n            )\r\n          ) FILTER (WHERE ec.id IS NOT NULL) as criteria\r\n        FROM evaluation_matrices em\r\n        LEFT JOIN employees creator ON em.created_by_manager_id = creator.employee_number -- JOIN ON employee_number\r\n        LEFT JOIN evaluation_criteria ec ON em.id = ec.matrix_id\r\n      `;\n            const sqlOrderBy = `\r\n        ORDER BY em.created_at DESC\r\n      `;\n            let sqlQuery;\n            let finalParams;\n            if ((0,_middleware_auth__WEBPACK_IMPORTED_MODULE_1__.isAdmin)(req.user.roles)) {\n                sqlQuery = `\r\n          ${sqlQueryBase}\r\n          -- Admin sees all, no specific WHERE clause needed beyond $1 for structure\r\n          WHERE $1 \r\n          GROUP BY em.id, creator.employee_number\r\n          ${sqlOrderBy}\r\n        `;\n                finalParams = [\n                    true,\n                    null\n                ]; // $1=isAdmin (true), $2 not used for admin\n            } else {\n                const authHeader = req.headers.authorization;\n                if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n                    return res.status(401).json({\n                        message: \"Authorization token is missing or invalid for Graph API call.\"\n                    });\n                }\n                const token = authHeader.split(\" \")[1];\n                try {\n                    const directReportsData = await (0,_middleware_auth__WEBPACK_IMPORTED_MODULE_1__.getUserDirectReports)(token); // Gets reports for the logged-in user (actingManagerUhpn)\n                    const subordinateUpns = directReportsData.map((report)=>report.userPrincipalName).filter((upn)=>typeof upn === \"string\" && upn.length > 0);\n                    // A manager can see matrices created by themselves or by their direct reports.\n                    const allowedCreatorUpns = [\n                        actingManagerUhpn,\n                        ...subordinateUpns\n                    ];\n                    sqlQuery = `\r\n            ${sqlQueryBase}\r\n            WHERE NOT $1 AND creator.user_id = ANY($2::TEXT[]) -- Filter: creator's UPN must be in the allowed list\r\n            GROUP BY em.id, creator.employee_number\r\n            ${sqlOrderBy}\r\n          `;\n                    finalParams = [\n                        false,\n                        allowedCreatorUpns\n                    ]; // $1=isAdmin (false), $2=array of allowed UPNs\n                } catch (graphError) {\n                    console.error(\"Failed to fetch direct reports from Graph API:\", graphError);\n                    return res.status(500).json({\n                        message: \"Failed to retrieve subordinate data for matrix filtering.\",\n                        details: graphError.message\n                    });\n                }\n            }\n            const result = await client.query(sqlQuery, finalParams);\n            res.status(200).json(result.rows);\n            return;\n        } else if (method === \"POST\") {\n            const selectedEmployeeIdHeader = req.headers[\"x-selected-employee-id\"];\n            if (!selectedEmployeeIdHeader) {\n                return res.status(400).json({\n                    message: \"x-selected-employee-id header is required (acting manager employee_number).\"\n                });\n            }\n            // Get the UPN of the employee profile the user is acting as (from the x-selected-employee-id header)\n            const actingManagerProfile = await client.query(\"SELECT user_id FROM employees WHERE employee_number = $1\", [\n                selectedEmployeeIdHeader\n            ]);\n            if (actingManagerProfile.rows.length === 0 || !actingManagerProfile.rows[0].user_id) {\n                return res.status(400).json({\n                    message: `Could not find UPN for the acting manager profile (employee_number: ${selectedEmployeeIdHeader}).`\n                });\n            }\n            const actingManagerProfileUpn = actingManagerProfile.rows[0].user_id;\n            // Ensure the logged-in user (actingManagerUhpn) matches the UPN of the selected employee profile they are trying to act as\n            if (actingManagerUhpn !== actingManagerProfileUpn) {\n                return res.status(403).json({\n                    message: \"Authenticated user UPN does not match the UPN of the selected employee profile.\"\n                });\n            }\n            const { title, description, valid_from, valid_to, status = \"draft\", criteria, employee_ids// These are subordinate employee_numbers\n             } = req.body;\n            const validationResult = await (0,_lib_evaluation_validation__WEBPACK_IMPORTED_MODULE_2__.validateMatrixInput)(req.body);\n            if (!validationResult.success) {\n                console.error(\"[API POST Matrix] Input validation failed:\", validationResult.errors);\n                return res.status(400).json({\n                    message: \"Invalid input\",\n                    errors: validationResult.errors\n                });\n            }\n            if (!employee_ids || !Array.isArray(employee_ids) || employee_ids.length === 0) {\n                return res.status(400).json({\n                    message: \"employee_ids is required and must be an array with at least one employee ID.\"\n                });\n            }\n            // Authorization: Check if the actingManagerProfileUpn is the manager of all requested subordinate employee_ids\n            const authHeader = req.headers.authorization;\n            if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n                return res.status(401).json({\n                    message: \"Authorization token is missing or invalid for Graph API call (POST).\"\n                });\n            }\n            const token = authHeader.split(\" \")[1];\n            let authorizedSubordinateEmployeeNumbers = [];\n            try {\n                // Get UPNs of direct reports to the actingManagerProfileUpn (who is the logged-in user)\n                const directReportsData = await (0,_middleware_auth__WEBPACK_IMPORTED_MODULE_1__.getUserDirectReports)(token, actingManagerProfileUpn); // Pass actingManagerProfileUpn to get *their* reports\n                const subordinateUpns = directReportsData.map((report)=>report.userPrincipalName).filter((upn)=>typeof upn === \"string\" && upn.length > 0);\n                if (subordinateUpns.length > 0) {\n                    const subordinatesQuery = await client.query(`SELECT employee_number FROM employees WHERE user_id = ANY($1::TEXT[]) AND active = true`, [\n                        subordinateUpns\n                    ]);\n                    authorizedSubordinateEmployeeNumbers = subordinatesQuery.rows.map((r)=>r.employee_number.toString());\n                }\n                console.log(`[POST Matrix Auth] Acting manager UPN: ${actingManagerProfileUpn} has authorized subordinate employee_numbers:`, authorizedSubordinateEmployeeNumbers);\n            } catch (graphError) {\n                console.error(\"[POST Matrix Auth] Failed to fetch direct reports from Graph API:\", graphError);\n                return res.status(500).json({\n                    message: \"Failed to retrieve subordinate data for authorization.\",\n                    details: graphError.message\n                });\n            }\n            const requestedSubordinateIds = employee_ids.map(String);\n            const unauthorizedRequestedIds = requestedSubordinateIds.filter((id)=>!authorizedSubordinateEmployeeNumbers.includes(id));\n            if (unauthorizedRequestedIds.length > 0) {\n                console.log(`[POST Matrix Auth] Unauthorized subordinate IDs requested:`, unauthorizedRequestedIds);\n                return res.status(403).json({\n                    message: `User (${actingManagerProfileUpn}) is not authorized for some requested subordinate employee IDs.`,\n                    unauthorized_ids: unauthorizedRequestedIds\n                });\n            }\n            console.log(`[POST Matrix Auth] All requested subordinate employee_ids are authorized for manager ${actingManagerProfileUpn}.`);\n            // If we reach here, authorization passed.\n            await client.query(\"BEGIN\");\n            // created_by_manager_id should be the employee_number of the acting manager (selectedEmployeeIdHeader)\n            // created_by and updated_by should be the UPN (actingManagerProfileUpn)\n            const matrixResult = await client.query(`INSERT INTO evaluation_matrices \r\n         (title, description, valid_from, valid_to, status, created_by_manager_id, created_by, updated_by)\r\n         VALUES ($1, $2, $3, $4, $5, $6, $7, $7)\r\n         RETURNING *`, [\n                title,\n                description,\n                valid_from,\n                valid_to,\n                status,\n                selectedEmployeeIdHeader,\n                actingManagerProfileUpn\n            ]);\n            const matrix = matrixResult.rows[0];\n            if (criteria && Array.isArray(criteria)) {\n                for (const criterion of criteria){\n                    await client.query(`INSERT INTO evaluation_criteria \r\n             (matrix_id, name, description, weight, is_competency_gap_critical, \r\n              min_score_possible, max_score_possible, created_by, updated_by)\r\n             VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $8)`, [\n                        matrix.id,\n                        criterion.name,\n                        criterion.description,\n                        criterion.weight,\n                        criterion.is_competency_gap_critical,\n                        criterion.min_score_possible,\n                        criterion.max_score_possible,\n                        actingManagerProfileUpn\n                    ]);\n                }\n            }\n            if (employee_ids && Array.isArray(employee_ids)) {\n                for (const empId of employee_ids){\n                    await client.query(`INSERT INTO matrix_applicability \r\n             (matrix_id, employee_id, valid_from, valid_to, status, created_by, updated_by)\r\n             VALUES ($1, $2, $3, $4, 'active', $5, $5)`, [\n                        matrix.id,\n                        empId,\n                        valid_from,\n                        valid_to,\n                        actingManagerProfileUpn\n                    ]);\n                }\n            }\n            await client.query(\"COMMIT\");\n            // Fetch the complete matrix with criteria\n            const completeMatrixQuery = `\r\n        SELECT\r\n          em.id as matrix_id,\r\n          em.title,\r\n          em.description,\r\n          em.valid_from,\r\n          em.valid_to,\r\n          em.status,\r\n          em.created_at,\r\n          em.updated_at,\r\n          em.created_by_manager_id,\r\n          creator.name as employee_name,\r\n          creator.company_name as company_name,\r\n          creator.employee_number as employee_number,\r\n          json_agg(\r\n            json_build_object(\r\n              'id', ec.id,\r\n              'name', ec.name,\r\n              'description', ec.description,\r\n              'weight', ec.weight,\r\n              'is_competency_gap_critical', ec.is_competency_gap_critical,\r\n              'min_score_possible', ec.min_score_possible,\r\n              'max_score_possible', ec.max_score_possible\r\n            )\r\n          ) FILTER (WHERE ec.id IS NOT NULL) as criteria\r\n        FROM evaluation_matrices em\r\n        LEFT JOIN employees creator ON em.created_by_manager_id = creator.employee_number -- Corrected JOIN\r\n        LEFT JOIN evaluation_criteria ec ON em.id = ec.matrix_id\r\n        WHERE em.id = $1\r\n        GROUP BY em.id, creator.employee_number -- Corrected GROUP BY\r\n      `;\n            const completeMatrix = await client.query(completeMatrixQuery, [\n                matrix.id\n            ]);\n            res.status(201).json(completeMatrix.rows[0] || null); // Ensure sending null if not found\n            return;\n        } else {\n            res.setHeader(\"Allow\", [\n                \"GET\",\n                \"POST\"\n            ]);\n            res.status(405).end(`Method ${method} Not Allowed for this route.`);\n            return;\n        }\n    } catch (error) {\n        if (client) {\n            await client.query(\"ROLLBACK\");\n        }\n        console.error(\"Error in matrices API:\", error);\n        // Check for specific error types if needed, e.g., error.code for pg errors\n        if (error.code === \"23505\") {\n            res.status(409).json({\n                message: \"Conflict: A similar record already exists.\",\n                details: error.detail\n            });\n        } else if (error.message.includes(\"value too long\")) {\n            res.status(400).json({\n                message: \"Bad Request: One of the provided values is too long.\"\n            });\n        } else {\n            res.status(500).json({\n                message: \"Internal Server Error\",\n                details: error.message\n            });\n        }\n        return;\n    } finally{\n        if (client) {\n            client.release();\n        }\n    }\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ((0,_middleware_auth__WEBPACK_IMPORTED_MODULE_1__.withAuth)(handler));\n\n__webpack_async_result__();\n} catch(e) { __webpack_async_result__(e); } });//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(api)/./src/pages/api/evaluation-matrices/index.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../webpack-api-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(api)/./node_modules/next/dist/build/webpack/loaders/next-route-loader/index.js?kind=PAGES_API&page=%2Fapi%2Fevaluation-matrices&preferredRegion=&absolutePagePath=.%2Fsrc%5Cpages%5Capi%5Cevaluation-matrices%5Cindex.ts&middlewareConfigBase64=e30%3D!")));
module.exports = __webpack_exports__;

})();